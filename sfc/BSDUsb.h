#ifndef _BSDUSB_
#define _BSDUSB_

#include <stdio.h>
#include <usb.h>
/*
 * Tyler Anderson Mon Nov 12 13:37:26 EST 2012
 * This is the class for interfacing to the tcd2 USB board
 */

class BSDUsb
{
 public:
  ///////////////////////////////////////////////////////////////////////
  // Default constructor
  //////////////////////////////////////////////////////////////////////
  BSDUsb();

  //////////////////////////////////////////////////////////////////////
  // Default destructor
  //////////////////////////////////////////////////////////////////////
  virtual ~BSDUsb();

  //////////////////////////////////////////////////////////////////////////////
  // USB initialization 
  // Parameters unsigned int, vendor ID number (0x04b4 in development)
  //            unsigned int, product ID number (0x0098 in development)
  // Returns    0 good
  //           <0 error code
  /////////////////////////////////////////////////////////////////////////////
  int BSDUsb_initialization(unsigned int vendor=0x04b4, unsigned int product=0x1800);

  //////////////////////////////////////////////////////////////////////////////
  // USB reinitialization. Run a close_all plus a USB reinitialization 
  // Parameters unsigned int, vendor ID number (0x04b4 in development)
  //            unsigned int, product ID number (0x0098 in development)
  // Returns    0 good
  //           <0 error code 
  /////////////////////////////////////////////////////////////////////////////
  int BSDUsb_reinitialization(unsigned int vendor=0x04b4, unsigned int product=0x1800);

  /////////////////////////////////////////////////////////////////////////////
  // Wrapper to close_all
  ////////////////////////////////////////////////////////////////////////////
  int BSDUsb_shutdown();

  //////////////////////////////////////////////////////////////////////////////
  // Bulk write bytes to USB EP2OUT 
  // Parameters const char * buf, buffer with data to write, 512 bytes max
  //            size_t nbytes, number of bytes to write
  // Returns    0 good
  //           <0 error code
  //////////////////////////////////////////////////////////////////////////////
  int BSDUsb_bulk_write_EP2OUT(const char *buf, size_t nbytes);

  //////////////////////////////////////////////////////////////////////////////
  // Bulk write bytes to USB EP4OUT 
  // Parameters const char * buf, buffer with data to write, 512 bytes max
  //            size_t nbytes, number of bytes to write
  // Returns    0 good
  //           <0 error code
  //////////////////////////////////////////////////////////////////////////////
  int BSDUsb_bulk_write_EP4OUT(const char *buf, size_t nbytes);

  //////////////////////////////////////////////////////////////////////////////
  // Bulk read bytes from EP6IN
  // Parameters const char *buf, buffer in which to store received data
  //            size_t nbytes, expected number of bytes to read
  // Returns    0 good
  //           <0 error code
  /////////////////////////////////////////////////////////////////////////////
  int BSDUsb_bulk_read_EP6IN(unsigned char *buf, size_t nbytes);
  
  /////////////////////////////////////////////////////////////////////////////
  // Bulk read bytes from USB EP8IN
  // Parameters char * buf, buffer in which to store received data
  //            size_t nbytes, expected number of bytes to read
  // Returns    0 good
  //           <0 error code
  //////////////////////////////////////////////////////////////////////////////
  int BSDUsb_bulk_read_EP8IN(unsigned char * buf, size_t nbytes);
  
  /////////////////////////////////////////////////////////////////////////////
  // Bulk read bytes from USB EP8IN. Blocks on read.
  // Parameters char * buf, buffer in which to store received data
  //            size_t nbytes, expected number of bytes to read
  // Returns    0 good
  //           <0 error code
  //////////////////////////////////////////////////////////////////////////////
  int BSDUsb_bulk_read_EP8IN_block(unsigned char * buf, size_t nbytes);


  /////////////////////////////////////////////////////////////////////////////
  // Reset the BSD USB device and reprogram it
  // Parameters const char * path, path to .ihx file for programming
  //            unsigned int, vendor ID number (0x04b4 in development)
  //            unsigned int, product ID number (0x0098 in development)
  //            
  // Returns    0 good
  //           <0 error code
  /////////////////////////////////////////////////////////////////////////////
  int BSDUsb_fx2lp_reset(const char * path = "./sfc/BSD_firmware.ihx", unsigned int vendor=0x04b4, unsigned int product=0x1800);

 private:
  /////////////////////////////////////////////////////////////////////////////
  // Find the given vendor and product id in the list of the system's connected
  // USB devices
  // Parameters int vendor, the vendor ID to look for
  //            int product, the product ID to look for
  //            int nth, how many times to search
  // Returns    0 good
  //           <0 error code
  ///////////////////////////////////////////////////////////////////////////
  struct usb_device * findDevice(int vendor, int product);

  /////////////////////////////////////////////////////////////////////////////
  // Open the usb device.
  // Returns    0 good
  //           <0 error code
  /////////////////////////////////////////////////////////////////////////////
  int open();

  /////////////////////////////////////////////////////////////////////////////
  // Close the usb handle
  // Returns    0 good
  //           <0 error code
  ////////////////////////////////////////////////////////////////////////////
  int close_hdl();

  /////////////////////////////////////////////////////////////////////////////
  // Close the usb handle and reinitialize the device and handle
  // Returns    0 good
  //           <0 error code
  ////////////////////////////////////////////////////////////////////////////
  int close_all();

  ///////////////////////////////////////////////////////////////////////////
  // Claim the USB interface
  // Returns    0 good
  //           <0 error code
  //////////////////////////////////////////////////////////////////////////
  int claim_interface();

  //////////////////////////////////////////////////////////////////////////
  // Release the USB interface
  // Returns    0 good
  //           <0 error code
  /////////////////////////////////////////////////////////////////////////
  int release_interface();

  /////////////////////////////////////////////////////////////////////////////
  // Perform the vendor specific operation on the FX2LP of writing to 8051 RAM
  // Parameters size_t addr,
  //            const unsigned char * data, 
  //            size_t nbytes
  // Returns    0 good
  //           <0 error code
  ////////////////////////////////////////////////////////////////////////////
  int write_RAM(size_t addr, const unsigned char *data, size_t nbytes);

  ////////////////////////////////////////////////////////////////////////////
  // Simple check if the USB device is open
  // Returns    usbhdl
  ////////////////////////////////////////////////////////////////////////////
  inline bool IsOpen() const 
  { return usbhdl; } 
  
  ////////////////////////////////////////////////////////////////////////////
  // Simple check if the USB device interface is claimed
  // Returns    1 claimed interface
  //            0 unclaimed interface
  ////////////////////////////////////////////////////////////////////////////
  inline bool IsClaimed() const 
  { return claimed; } 
  
  /////////////////////////////////////////////////////////////////////////////
  // Data members
  ////////////////////////////////////////////////////////////////////////////
  struct usb_device * usbdev;
  struct usb_dev_handle * usbhdl;
  int claimed; // whether or not the interface has been claimed
  int release_ret; // return value for the last interface release attempt
};

#endif // _BSDUSB_
